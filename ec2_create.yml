---
- name: Create an instance
  hosts: localhost
  gather_facts: False
  vars:
    keypair: KEY_PAIR
    instance_type: t2.micro
    security_group: NAME_OF_THE_GROUP_TO_BE_CREATED_OR_UPDATED
    image: ami-9abea4fb
    region: AWS_REGION
    vpc: VPC_ID
    subnet: SUBNET_ID

  tasks:

  - name: Create a security group
    local_action: 
      module: ec2_group
      name: "{{ security_group }}"
      description: Security Group for webserver Servers
      vpc_id: "{{ vpc }}"
      region: "{{ region }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0

  - name: Launch instance
    ec2:
      key_name: "{{ keypair }}"
      group: "{{ security_group }}"
      instance_type: "{{ instance_type }}"
      image: "{{ image }}"
      wait: true
      region: "{{ region }}"
      vpc_subnet_id: "{{ subnet }}"
      assign_public_ip: yes
    register: ec2

  - name: Allocating elastic IP to instance
    ec2_eip:
      in_vpc: yes
      reuse_existing_ip_allowed: yes
      state: present
      region: "{{ region }}"
      instance_id: "{{ ec2.instance_ids[0] }}"
    register: instance_eip
  - debug: var=instance_eip.public_ip

  - name: Add new instance to host group
    add_host: hostname={{ item.public_ip }} groupname=launched
    with_items: "{{ ec2.instances }}"

  - name: Wait for SSH to come up
    wait_for: host={{ instance_eip.public_ip }} port=22 delay=60 timeout=320 state=started

  - name: update hosts file
    local_action: shell echo "[web]\n""{{ instance_eip.public_ip }} ansible_user=ubuntu" > hosts
    with_items: "{{ ec2.instances }}"

  - name: update hosts file
    local_action: shell echo "[db]\n""{{ instance_eip.public_ip }} ansible_user=ubuntu" >> hosts
    with_items: "{{ ec2.instances }}"


